/****************************************************************************
 **
 ** This demo file is part of yFiles for JavaFX 3.6.
 **
 ** Copyright (c) 2000-2023 by yWorks GmbH, Vor dem Kreuzberg 28,
 ** 72070 Tuebingen, Germany. All rights reserved.
 **
 ** yFiles demo files exhibit yFiles for JavaFX functionalities. Any redistribution
 ** of demo files in source code or binary form, with or without
 ** modification, is not permitted.
 **
 ** Owners of a valid software license for a yFiles for JavaFX version that this
 ** demo is shipped with are allowed to use the demo source code as basis
 ** for their own yFiles for JavaFX powered applications. Use of such programs is
 ** governed by the rights and conditions as set out in the yFiles for JavaFX
 ** license agreement.
 **
 ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
 ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **
 ***************************************************************************/
plugins {
   id 'application'
   id 'org.openjfx.javafxplugin' version '0.1.0'
   // The shadow plugin is used to generate an "uber"-jar containing the yFiles for JavaFX dependencies
   id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
  mavenCentral()
}

sourceCompatibility = 11

application {
  mainModule = 'gradledemo'
  mainClass = 'gradledemo.GradleDemo'
}

jar {
  manifest {
    attributes(
            'Main-Class': application.getMainClass()
    )
  }
}

// use separate configurations for the yguard and yFiles for JavaFX dependencies
configurations {
  yfiles
  yguard
  // include yFiles for JavaFX jar in the compileClasspath
  compileClasspath.extendsFrom(yfiles)
}

dependencies {
  yfiles files('../../../../lib/yfiles-for-javafx.jar')
  yguard 'com.yworks:yguard:3.1.0'
}

run {
  // add the yfiles dependency to the classpath - for the 'uber' jar this is not necessary as yfiles is included in it
  classpath += configurations.yfiles
}


javafx {
  version = "17"
  modules = [ 'javafx.controls', 'javafx.fxml' ]
}

// configure the 'uber' jar to only include the application and the yFiles for JavaFX jar
shadowJar {
  configurations = [project.configurations.yfiles]
}

task obfuscate {
  dependsOn shadowJar
  group 'yGuard'
  description 'Obfuscates the java archive.'

  doLast {
    ant.taskdef(name: 'yguard',
                classname: 'com.yworks.yguard.YGuardTask',
                classpath: configurations.yguard.asPath
    )

    // In this demo we obfuscate the "uber"-jar.
    def archivePath = shadowJar.archiveFile.get().asFile.path
    ant.yguard {
      inoutpair(in: archivePath, out: archivePath.replace(".jar", "_obf.jar"))

      // include the runtimeClasspath as externalclasses so JavaFX SDK classes can be resolved
      externalclasses {
        pathelement(path: configurations.runtimeClasspath.asPath)
      }

      rename(mainclass: application.getMainClass(), 
             logfile: "${buildDir}/obfuscation.log.xml", 
             annotationclass: 'com.yworks.yfiles.utils.Obfuscation', 
             replaceClassNameStrings: 'true') {
        keep {
          method(name: "void main(java.lang.String[])", "class": application.getMainClass().get())
        }
      }
    }
  }
}
